# Mostly we find time complexity of recursion using either by using:

1. "Recursive Tree Method" or by using 

2. "Recurrence Relation" and "Substitution Method". 


--> Sometimes we might need both the methods to derive the time complexity of a recursive solution. 

--> The Recursive Tree Method is often more intuitive and helps in understanding the structure of the recursion, while Recurrence Relations and the Substitution Method provide a more formal and mathematical way of expressing and solving the time complexity.


_ _ _ _ _ _ _ _ _ _ 



# Steps to Determine the Time Complexity of Recursive Solutions:


1. Recurrence Relation Analysis:

--> Use a recurrence relation to express the time complexity of the recursive algorithm. This relation describes how much time each function call takes with respect to the input size "n".


2. Identify the Scope of Recurrence:

--> Determine whether the recurrence relation represents the entire "level" of the recursive tree or just a "single function call".


3. Find Generalized Term:

--> If the recurrence relation is associated with the "work done at one whole level of a recursive tree," find a generalized term that represents the total number of "levels" in the recursive tree concerning the input size "n".

--> If the recurrence relation is linked to the "total number of function calls," find a generalized term that represents the total number of "function calls" in the recursive tree concerning the input size "n".


4. Combine Terms for Time Complexity:

--> Multiply the generalized term for the "total number of function calls" or "total number of levels" with the time taken by a single "function call" or "level" to execute.
The result gives the overall time complexity of the recursive solution.


_ _ _ _ _ _ _ _ _ _ 



# Understanding Space Complexity of Recursive Solution: 


--> Space complexity of recursive approach depends on the depth of function call stack and the extra space which is used inside each function call. 

--> But here you cannot just multiple these two terms directly in this scenario just like we did at the time of time complexity, because space is different than time. 

--> Once the time passes away, it cannot be retrieved back, but if you're using some space right now then in many cases it is possible that you might free that space before you again want to use that much space and in this scenario you're reusing the space and the space consumption is not growing exponentially. 

--> Understand this concept by seeing this for loop: 

Ex: 

int n = 10;
for(int i=0; i < n; i++){
    int temp = 0;
}

--> this loop runs 10 times, that's why it's time complexity is O(n), but it's space complexity is not O(n) even though temp is also declared n times in the loops entire life time, this is obviously because when loop goes to its next iteration, because of the block scope of temp variable, the variable gets destroyed, and then in next iteration the variable again gets created, so the space used by for loop is just 4 bytes in its entire runtime, that's why it is O(1)/constant, because this space won't increase/decrease even if we increase/decrease the size of n. 


--> This above logic also applies in recursive solutions, if you're using n space in your function when the stack has started to unwind, then before the next recursive function call starts executing, this function call's space will be freed (In this case the only time this function call's taken up space will pile up when you as a coder allocate memory dynamically in C++ and then forget to free this memory using delete keyword). 

--> So, the memory will be freed before you go to next function call, and then again n size of memory will be consumed by next function call, therefore if the depth of function call stack is n here and if the space consumed by each function call is also n in this scenario, then the space complexity won't be O(n*n) = O(n^2) but it will be O(n) + O(n) = O(n). 


$ So, while finding space complexity of a recursive solution, always remember the catch, you've to find out when the space is getting piled up and when it is getting reused, and then depending on that you have to derive that what is the space complexity of your solution. 

--> Whenever the extra space that we're using inside our recursive function is being trapped inside each stack frame until the stack starts unwinding, we multiply the function call stack depth and the average upper bound space complexity of each function call. 

--> And if each function call is taking constant space, then we just know that each function call is taking O(1) space and the function call stack has some depth let's say n, that's why the space complexity used by our recursive solution is just the depth of function call stack in terms of input size "n", and that's why the space complexity caused due to function call stack is O(n). 



$ The key insight: 
--> Space complexity recursive solutions depends not only on the depth of the function call stack but also on the patterns of space accumulation and reuse. 