# Understand all bitwise operators 


_ _ _ _ _ _ _ _ _ _ 



@ Right and Left Shift Operators: 



# Unsigned Right Shift Operator (>>) aka Logical Right Shift Operator: 

--> For unsigned types, this simply fills the vacant bits with zeros. 



# Signed Right Shift Operator (>>>) aka Arithmetic Right Shift Operator: 

--> For signed types, the most significant bit (sign bit) is replicated to fill the vacant bits. This preserves the sign of the number. 



*** In C++ we don't have "Unsigned Shift Operator" or "Signed Shift Operator" individually. 

--> We just have a "Right Shift Operator" (>>) and this right shift operator behaves as "Signed Right Shift Operator" and if we see particularly, we don't even need "Unsigned Right Shift Operator".

--> When when used with unsigned datatypes, obviously because the MSB (Most Significant Bit) is 0, the shifted bits will be filled with 0 and like this, this operator also behaves as "Unsigned Right Shift Operator", 


_ _ _ _ _ _ _ _ _ _ 



# Our systems have 64 bits architecture mostly: 


@ But hypothetically if we just had 4 bits architecture then this is how binary representation of signed and unsigned numbers will look like when we use 4 bits: 


* A 4 bit Unsigned Number can represent a range of (0-15), a 16 number range: 

    decimal       binary 
       0     =     0000
       1     =     0001 
       2     =     0010 


--> 

--> 


_ _ _ _ _ _ _ _ _ _ 



* Find number is odd or not using "& with 1" trick 

* Divide number by 2 using right shift operator, here the remainder is discarded  

* Multiply number by 2 using left shift operator  








# How negative numbers are represented in binary 

